AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  pruebas-sanki0

Resources:
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessForAppsyncResolvers
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:StartSyncExecution #Type: Express
                Resource:
                  - !Ref SumAgeStateMachine
                  - !Ref SumAgeUpdateStateMachine
                  - !Ref MapResolverStateMachine

              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt DB.Arn
                  - !Sub 
                    - "${Table}/index/*"
                    - { Table: !GetAtt DB.Arn }
              - Effect: Allow
                Action:
                - lambda:invokeFunction
                Resource: 
                  - !GetAtt GetAllUsersFunction.Arn



  AppSyncApi:
    DependsOn: AppSyncServiceRole
    Type: AWS::AppSync::GraphQLApi
    Description: "The GraphQL API for the single table App"
    Properties:
      Name: AppSyncTestAPI
      AuthenticationType: API_KEY

 # API Key for external access
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId

   # AppSync Schema
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: "./schema.graphql"

 # AppSync Data Source for DynamoDB
  AppSyncTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: SingleTableStudents
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: "The Single Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref DB
        AwsRegion: !Sub ${AWS::Region}

 # AppSync Data Source for StepFunction
  StepFunctionsHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: StepFunctionsHttpDataSource
      Description: Step Functions HTTP
      Type: HTTP
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      HttpConfig:
        Endpoint: !Sub https://sync-states.${AWS::Region}.amazonaws.com/
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion: !Ref AWS::Region
            SigningServiceName: states

  # GetAllUsers Data Source
  GetAllUsersDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      Name: GetAllUsersDataSource
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetAllUsersFunction.Arn

  GetAllUsersResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getAllUsers
      DataSourceName: !GetAtt GetAllUsersDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "process": $utils.toJson($context.args.process)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
        

  # Resolver: Mutation - createStudent
  createStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: createStudent
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
                "id" : $util.dynamodb.toDynamoDBJson("STUDENT"),
                "sort": $util.dynamodb.toDynamoDBJson($context.arguments.input.dni)
          },
          "attributeValues" : {
            "dni" : $util.dynamodb.toDynamoDBJson($context.arguments.input.dni),
            "name" : $util.dynamodb.toDynamoDBJson($context.arguments.input.name),
            "address" : $util.dynamodb.toDynamoDBJson($context.arguments.input.address),
            "age" : $util.dynamodb.toDynamoDBJson($context.arguments.input.age),
            "courses" : $util.dynamodb.toDynamoDBJson($context.arguments.input.courses)
          }
        }
      ResponseMappingTemplate: >
        {
            "name": $util.toJson($ctx.result['name']),
            "dni": $util.toJson($ctx.result['dni']),
            "address": $util.toJson($ctx.result['address']),
            "age": $util.toJson($ctx.result['age']),
            "courses": 
              [
                #foreach($course in $ctx.result.courses)
                {
                  "id": $util.toJson($course['id']),
                  "name": $util.toJson($course.name)
                }#if($foreach.hasNext),#end
                #end
              ]
        }

  # Resolver: Mutation - updateStudent
  UpdateStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: updateStudent
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
                "id" : $util.dynamodb.toDynamoDBJson("STUDENT"),
                "sort": $util.dynamodb.toDynamoDBJson($context.arguments.input.dni)
          },
          "update":{
              "expression" : "set #name=:name, address = :address, age = :age",
              "expressionNames" : {
                "#name" : "name"
              }, 
              "expressionValues" : {

                ":name" : $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.input.name, "")),

                ":address" : $utils.dynamodb.toDynamoDBJson($context.arguments.input.address),
                ":age" : $utils.dynamodb.toDynamoDBJson($context.arguments.input.age)
              }
            }
        }
      ResponseMappingTemplate: >
        {
            "name": $util.toJson($ctx.result['name']),
            "dni": $util.toJson($ctx.result['dni']),
            "address": $util.toJson($ctx.result['address']),
            "age": $util.toJson($ctx.result['age'])
        }

  # Resolver: Mutation - deleteStudent
  DeleteStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteStudent
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson("STUDENT"),
            "sort": $util.dynamodb.toDynamoDBJson($ctx.args.dni)
          }
        }
      ResponseMappingTemplate: >
        {
            "name": $util.toJson($ctx.result['name']),
            "dni": $util.toJson($ctx.result['dni']),
            "address": $util.toJson($ctx.result['address']),
            "age": $util.toJson($ctx.result['age'])
        }

  # Resolver: Query - getStudent
  GetStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getStudent
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson("STUDENT"),
            "sort": $util.dynamodb.toDynamoDBJson($context.arguments.dni)
          }
        }
      ResponseMappingTemplate: >
        {
            "name": $util.toJson($ctx.result['name']),
            "dni": $util.toJson($ctx.result['dni']),
            "address": $util.toJson($ctx.result['address']),
            "age": $util.toJson($ctx.result['age'])
        }

  # Resolver: Query - listStudents
  ListStudentsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: listStudents
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query": {
            "expression": "id = :id",
            "expressionValues":	{              
        	    ":id" : $util.dynamodb.toDynamoDBJson("STUDENT")
            }
          }
        }
      ResponseMappingTemplate: >
        {
          "students": [
                      #foreach($item in $ctx.result.items)
                        {
                            "dni":$util.toJson($item['dni']),
                            "name": $util.toJson($item['name']),
                            "address": $util.toJson($item['address']),
                            "age": $util.toJson($item['age'])
                        }#if($foreach.hasNext),#end
                        #end
                    ]
        }

# Resolver: Query - listStudents

  FilterStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: filterStudent
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query": {
            "expression": "id = :id",
            "expressionValues":	{              
        	    ":id" : $util.dynamodb.toDynamoDBJson("STUDENT")
            }
          },
          "filter" : {
            "expression" : "#name = :name",
            "expressionNames" : {
                "#name" : "name"
              }, 
            "expressionValues" : {
                ":name" : $util.dynamodb.toDynamoDBJson("sanki0")
            }
          },
          #if( $context.args.nextToken ) "nextToken": "$context.args.nextToken", #end
          #if( $context.args.limit ) "limit" : $context.args.limit #else "limit": 5  #end
        }
      ResponseMappingTemplate: >
        {
          "students": [
                      #foreach($item in $ctx.result.items)
                        {
                            "dni":$util.toJson($item['dni']),
                            "name": $util.toJson($item['name']),
                            "address": $util.toJson($item['address']),
                            "age": $util.toJson($item['age'])
                        }#if($foreach.hasNext),#end
                        #end
                    ],
          "nextToken": $util.toJson($ctx.result.nextToken)
        }

  # Resolver: Mutation - sumAgeStudent
  SumAgeStudentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: sumAgeStudent
      DataSourceName: !GetAtt StepFunctionsHttpDataSource.Name
      RequestMappingTemplate: !Sub >
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/",
          "params": {
            "headers": {
              "content-type": "application/x-amz-json-1.0",
              "x-amz-target":"AWSStepFunctions.StartSyncExecution"
            },
            "body": {
              "stateMachineArn": "${SumAgeStateMachine}",
              "input": "{ \"dni\": $util.escapeJavaScript($util.toJson($ctx.args.dni))}"
            }
          }
        }
      ResponseMappingTemplate: $util.parseJson($ctx.result.body).output
        # {
        #   "dni": $util.toJson($ctx.result.body.output['dni']),
        #   "name": $util.toJson($ctx.result.body.output['name']),
        #   "age": $util.toJson($ctx.result.body.output['age'])
        # }

  # Resolver: Mutation - sumAgeUpdatdStudent
  SumAgeUpdateStudentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: sumAgeUpdateStudent
      DataSourceName: !GetAtt StepFunctionsHttpDataSource.Name
      RequestMappingTemplate: !Sub >
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/",
          "params": {
            "headers": {
              "content-type": "application/x-amz-json-1.0",
              "x-amz-target":"AWSStepFunctions.StartSyncExecution"
            },
            "body": {
              "stateMachineArn": "${SumAgeUpdateStateMachine}",
              "input": "{ \"dni\": $util.escapeJavaScript($util.toJson($ctx.args.dni)),  \"age\": $util.escapeJavaScript($util.toJson($ctx.args.age))}"
            }
          }
        }
      ResponseMappingTemplate: $util.parseJson($ctx.result.body).output

  # Resolver: Mutation - getStudentCourses
  GetStudentCoursesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: getStudentCourses
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/",
          "params": {
            "headers": {
              "content-type": "application/x-amz-json-1.0",
              "x-amz-target":"AWSStepFunctions.StartSyncExecution"
            },
            "body": {
              "stateMachineArn": "${MapResolverStateMachine}",
              "input": "{ \"dni\": $util.escapeJavaScript($util.toJson($ctx.args.dni))}"
            }
          }
        }
      ResponseMappingTemplate: $ctx.result.body
      # $util.parseJson($ctx.result.body).output

        # {
        #   "courses": [
        #     #foreach($course in $ctx.result.courses)
        #     {
        #       "id": $util.toJson($course['id']),
        #       "name": $util.toJson($course.name)
        #     }#if($foreach.hasNext),#end
        #     #end
        #   ]
        # }


 # Resolver: Mutation - storeSettings
  StoreSettingsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: storeSettings
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        #if($ctx.args.user!="") 
          #set($user=$ctx.args.settings.user)
        #else 
          #set($user=$ctx.identity.username)
        #end
        {
            "version" : "2017-02-28",
            "operation" : "PutItem",
            "key" : {
                "id" : $util.dynamodb.toDynamoDBJson($user),
                "sort" : {"S":"SETTINGS"}
            },
            "attributeValues" : $util.dynamodb.toMapValuesJson($ctx.args.settings)
        }
      ResponseMappingTemplate: $util.toJson($ctx.args.settings)

  # Resolver: Mutation - updateSetting
  UpdateSettingResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: updateSettings
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        #if($util.isNull($ctx.args.settings.homeOffice))
          #set($homeOffice=0)
        #else
          #set($homeOffice=$ctx.args.settings.homeOffice)
        #end
        {
            "version" : "2018-05-29",
            "operation" : "UpdateItem",
            "key" : {
                "id" : $util.dynamodb.toDynamoDBJson($ctx.args.settings.user),
                "sort" : $util.dynamodb.toDynamoDBJson("SETTINGS")
            },
            "update" : {
            "expression" : "set #name=:name, docType=:docType, dni=:dni, gender=:gender, birthDate=:birthDate, countryOfBirth=:countryOfBirth, personalEmail=:personalEmail, maritalStatus=:maritalStatus, personalPhone=:personalPhone, countryOfResidence=:countryOfResidence, residenceDepartment=:residenceDepartment, address=:address, area=:area, subArea=:subArea, workerType=:workerType, entryDate=:entryDate, phone=:phone, #if(!$util.isNullOrEmpty($ctx.args.settings.apps)) apps=:apps,#end menu=:menu, processes=:processes, #if(!$util.isNullOrEmpty($ctx.args.settings.role)) #role=:role,#end #if(!$util.isNullOrEmpty($ctx.args.settings.officeRole)) officeRole=:officeRole,#end #if(!$util.isNullOrEmpty($ctx.args.settings.boss)) boss=:boss,#end #if(!$util.isNullOrEmpty($ctx.args.settings.bossName)) bossName=:bossName,#end #backup=:backup, backupName=:backupName, days=:days, homeOffice=:homeOffice",
            "expressionNames" : {
                "#name": "name",
                #if(!$util.isNullOrEmpty($ctx.args.settings.role))
                "#role": "role",
                #end
                "#backup": "backup"
              },
              "expressionValues" : {
                ":name": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.name),
                ":docType": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.docType),
                ":dni": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.dni),
                ":gender": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.gender, "")),
                ":birthDate": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.birthDate, "")),
                ":countryOfBirth": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.countryOfBirth, "")),
                ":personalEmail": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.personalEmail, "")),
                ":maritalStatus": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.maritalStatus, "")),
                ":personalPhone": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.personalPhone, "")),
                ":countryOfResidence": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.countryOfResidence, "")),
                ":residenceDepartment": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.residenceDepartment, "")),
                ":address": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.address, "")),
                ":area" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.area),
                ":subArea" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.subArea),
                ":workerType" : $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.workerType, "")),
                ":entryDate" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.entryDate),
                ":phone" : $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.phone, "")),

                ":apps": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.apps),

                ":menu" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.menu),
                ":processes" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.processes),
                #if(!$util.isNullOrEmpty($ctx.args.settings.role))
                ":role": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.role),
                #end
                #if(!$util.isNullOrEmpty($ctx.args.settings.officeRole))
                ":officeRole": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.officeRole),
                #end
                #if(!$util.isNullOrEmpty($ctx.args.settings.boss))
                ":boss": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.boss),
                #end
                #if(!$util.isNullOrEmpty($ctx.args.settings.bossName))
                ":bossName": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.bossName),
                #end
                ":backup" : $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.backup, "")),
                ":backupName" : $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.backupName, "")),
                ":days" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.days),
                ":homeOffice": $utils.dynamodb.toDynamoDBJson($homeOffice)
              }
            }
        }
      ResponseMappingTemplate: >
        {

          "apps": $util.toJson($ctx.result.apps), 
          "menu": $util.toJson($ctx.result.menu), 
          "processes": $util.toJson($ctx.result.processes), 
          "photo": $util.toJson($ctx.result.photo), 
          "name": $util.toJson($ctx.result.name), 
          "dni": $util.toJson($ctx.result.dni), 
          "docType": $util.toJson($ctx.result.docType), 
          "email": $util.toJson($ctx.result.email),
          "phone": $util.toJson($ctx.result.phone),
          "area": $util.toJson($ctx.result.area), 
          "subArea": $util.toJson($ctx.result.subArea), 
          "days": $util.toJson($ctx.result.days), 
          "homeOffice": $util.toJson($ctx.result.homeOffice),
          "role": $util.toJson($ctx.result.role), 
          "officeRole": $util.toJson($ctx.result.officeRole), 
          "boss": $util.toJson($ctx.result.boss), 
          "bossName": $util.toJson($ctx.result.bossName),
          "backup": $util.toJson($ctx.result.backup), 
          "backupName": $util.toJson($ctx.result.backupName), 
          "user": $util.toJson($ctx.result.user), 
          "gender": $util.toJson($ctx.result.gender), 
          "birthDate": $util.toJson($ctx.result.birthDate), 
          "countryOfBirth": $util.toJson($ctx.result.countryOfBirth), 
          "personalEmail": $util.toJson($ctx.result.personalEmail), 
          "maritalStatus": $util.toJson($ctx.result.maritalStatus), 
          "personalPhone": $util.toJson($ctx.result.personalPhone), 
          "countryOfResidence": $util.toJson($ctx.result.countryOfResidence), 
          "residenceDepartment": $util.toJson($ctx.result.residenceDepartment), 
          "address": $util.toJson($ctx.result.address), 
          "workerType": $util.toJson($ctx.result.workerType), 
          "entryDate": $util.toJson($ctx.result.entryDate),
          "lastSessionDate": $util.toJson($ctx.result.lastSessionDate),
          "creationDate": $util.toJson($ctx.result.creationDate),
          "userStatus": $util.toJson($ctx.result.userStatus),
          "userType": $util.toJson($ctx.result.userType)
        }

  # GetAllUsersResolver:
  #   Type: AWS::AppSync::Resolver
  #   DependsOn: AppSyncSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     TypeName: Query
  #     FieldName: getAllUsers
  #     DataSourceName: !GetAtt AppSyncTableDataSource.Name
  #     RequestMappingTemplate: >
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "Query",    
  #         "index" : "list-users",      
  #         "query" : {
  #           "expression": "sort = :sort",            
  #           "expressionValues" : {
  #               ":sort" : $util.dynamodb.toDynamoDBJson("SETTINGS")
  #           }
  #         },
  #         #if( $context.args.nextToken ) "nextToken": "$context.args.nextToken", #end
  #         "limit" : 500
  #       }
  #     ResponseMappingTemplate: >
  #       {
  #         "items": [
  #                       #foreach($item in $ctx.result.items)
  #                       {
  #                           "user": $util.toJson($item['id']),
  #                           "apps": $util.toJson($item['apps']),
  #                           "menu": $util.toJson($item['menu']),                         
  #                           "processes": $util.toJson($item['processes']),                           
  #                           "photo": $util.toJson($item['photo']),
  #                           "name": $util.toJson($item['name']),                           
  #                           "dni": $util.toJson($item['dni']),                           
  #                           "docType": $util.toJson($item['docType']),                           
  #                           "email": $util.toJson($item['email']),                           
  #                           "phone": $util.toJson($item['phone']),                           
  #                           "area": $util.toJson($item['area']),                           
  #                           "subArea": $util.toJson($item['subArea']),                           
  #                           "days": $util.toJson($item['days']),
  #                           "homeOffice": $util.toJson($item['homeOffice']),
  #                           "role": $util.toJson($item['role']),
  #                           "officeRole": $util.toJson($item['officeRole']),
  #                           "boss": $util.toJson($item['boss']),                           
  #                           "bossName": $util.toJson($item['bossName']),
  #                           "backup": $util.toJson($item['backup']),                           
  #                           "backupName": $util.toJson($item['backupName']),     
  #                           "gender": $util.toJson($item['gender']),
  #                           "birthDate": $util.toJson($item['birthDate']),
  #                           "countryOfBirth": $util.toJson($item['countryOfBirth']),
  #                           "personalEmail": $util.toJson($item['personalEmail']),
  #                           "maritalStatus": $util.toJson($item['maritalStatus']),
  #                           "personalPhone": $util.toJson($item['personalPhone']),                            
  #                           "countryOfResidence": $util.toJson($item['countryOfResidence']),
  #                           "residenceDepartment": $util.toJson($item['residenceDepartment']),
  #                           "address": $util.toJson($item['address']),
  #                           "workerType": $util.toJson($item['workerType']),
  #                           "entryDate": $util.toJson($item['entryDate']),
  #                           "lastSessionDate": $util.toJson($item['lastSessionDate']),
  #                           "creationDate": $util.toJson($item['creationDate']),
  #                           "userStatus": $util.toJson($item['userStatus']),
  #                           "userType": $util.toJson($item['userType'])

  #                       }#if($foreach.hasNext),#end
  #                       #end
  #                    ],
  #         "nextToken": $util.toJson($ctx.result.nextToken)
  #       }

  # GetAllUsersPipelineResolver:
  #   Type: AWS::AppSync::Resolver
  #   DependsOn: AppSyncSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     TypeName: Query
  #     FieldName: getAllUsers
  #     Kind: PIPELINE
  #     PipelineConfig: 
  #       Functions:
  #         - !GetAtt getProcessesFunction.FunctionId
  #         - !GetAtt getProcessesActiveFunction.FunctionId
  #     RequestMappingTemplate: >
  #       $util.qr($context.stash.put("process", $ctx.args.process))
  #       $util.qr($context.stash.put("nextToken", $ctx.args.nextToken))
  #       {}
  #     ResponseMappingTemplate: "$util.toJson($context.result)"

  #  # Function: getProcessesFunction
  # getProcessesFunction:
  #   Type: AWS::AppSync::FunctionConfiguration
  #   DependsOn: AppSyncSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     Name: getProcessesFunction
  #     DataSourceName: !GetAtt AppSyncTableDataSource.Name
  #     FunctionVersion: "2018-05-29"
  #     RequestMappingTemplate: >
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "Query",    
  #         "index" : "list-users",      
  #         "query" : {
  #           "expression": "sort = :sort",            
  #           "expressionValues" : {
  #               ":sort" : $util.dynamodb.toDynamoDBJson("SETTINGS")
  #           }
  #         },
  #       }
  #     ResponseMappingTemplate: >      
  #       {
  #           "items": [
  #                       #foreach($item in $ctx.result.items)
  #                       {
  #                         "$util.toJson($context.result.processes)"
  #                       }#if($foreach.hasNext),#end
  #                       #end
  #                   ],
  #           "nextToken": $util.toJson($ctx.stash.nextToken)
  #       }

  #  # Function: getProcessesActiveFunction
  # getProcessesActiveFunction:
  #   Type: AWS::AppSync::FunctionConfiguration
  #   DependsOn: AppSyncSchema
  #   Properties:
  #     ApiId: !GetAtt AppSyncApi.ApiId
  #     Name: getProcessesActiveFunction
  #     DataSourceName: !GetAtt AppSyncTableDataSource.Name
  #     FunctionVersion: "2018-05-29"
  #     RequestMappingTemplate: >
  #       {
  #         "version" : "2017-02-28",
  #         "operation" : "Query",
  #         "query" : {
  #           "expression": "sort = :sort",
  #           "expressionValues" : {
  #               ":sort" : $util.dynamodb.toDynamoDBJson("SETTINGS")
  #           }
  #         },
  #       }
  #     ResponseMappingTemplate: $util.toJson($ctx.result.processes)


 ###############      
 ## LOGS      ##
 ###############  

  SumAgeLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/sum-age
      RetentionInDays: 3 

  SumAgeUpdateLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/sum-age-update
      RetentionInDays: 3 
      
  MapResolverLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vendedlogs/states/${AWS::StackName}/map-resolver
      RetentionInDays: 3 

 ###################      
 ## STATEMACHINES ##
 ###################

  SumAgeStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: sumAgeStateMachine
      DefinitionUri: statemachines/sum-age.asl.json
      DefinitionSubstitutions:
        DDBUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        DDBGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName: !Ref DB
        SumAgeFunctionArn: !GetAtt SumAgeFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt SumAgeLogs.Arn
        IncludeExecutionData: true
        Level: ALL   
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref SumAgeFunction
        - DynamoDBCrudPolicy:
            TableName: !Ref DB
        - CloudWatchLogsFullAccess

  SumAgeUpdateStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: sumAgeUpdateStateMachine
      DefinitionUri: statemachines/sum-age-update.asl.json
      DefinitionSubstitutions:
        DDBGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName: !Ref DB
        SumAgeUpdateFunctionArn: !GetAtt SumAgeUpdateFunction.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt SumAgeUpdateLogs.Arn
        IncludeExecutionData: true
        Level: ALL   
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref SumAgeUpdateFunction
        - DynamoDBCrudPolicy:
            TableName: !Ref DB
        - CloudWatchLogsFullAccess

  MapResolverStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: mapResolverStateMachine
      DefinitionUri: statemachines/map-resolver.asl.json
      DefinitionSubstitutions:
        DDBUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        DDBGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName: !Ref DB
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt MapResolverLogs.Arn
        IncludeExecutionData: true
        Level: ALL   
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref DB
        - CloudWatchLogsFullAccess


  # DynamoDB
  DB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Student
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sort
          AttributeType: S        
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sort
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: list-users
          KeySchema:
            - AttributeName: sort
              KeyType: HASH
            - AttributeName: id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

# Functions
  SumAgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/sum-age
      Handler: handler
      Runtime: go1.x
      MemorySize: 128    
      Timeout: 5
      Policies:
        - AWSLambdaBasicExecutionRole
  
  SumAgeUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/sum-age-update
      Handler: sum-age-update
      Runtime: go1.x
      MemorySize: 128    
      Timeout: 5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DB
      Environment:
        Variables:
          DB: !Ref DB

  CheckEmailUserTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/check-email-usertype
      Handler: ofvi-check-email-usertype
      Runtime: go1.x

      Policies:
        - AWSLambdaBasicExecutionRole

  CopyCoursesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: functions/copy-courses
      Handler: copy-courses
      Runtime: go1.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DB
      Environment:
        Variables:
          DB: !Ref DB

  GetAllUsersFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: functions/get-all-users
      Handler: get-all-users
      Runtime: go1.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DB
      Environment:
        Variables:
          DB: !Ref DB



Outputs:
  APIKey:
    Description: API Key
    Value: !GetAtt AppSyncApiKey.ApiKey
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId         
