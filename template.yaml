AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  pruebas-sanki0

Resources:
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessForAppsyncResolvers
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # - Effect: Allow
              #   Action:
              #     - states:StartSyncExecution
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt DB.Arn
                  - !Sub 
                    - "${Table}/index/*"
                    - { Table: !GetAtt DB.Arn }



  AppSyncApi:
    DependsOn: AppSyncServiceRole
    Type: AWS::AppSync::GraphQLApi
    Description: "The GraphQL API for the single table App"
    Properties:
      Name: AppSyncTestAPI
      AuthenticationType: API_KEY

 # API Key for external access
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId

   # AppSync Schema
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      DefinitionS3Location: "./schema.graphql"

 # AppSync Data Source for DynamoDB
  AppSyncTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: SingleTableStudents
      ApiId: !GetAtt AppSyncApi.ApiId
      Description: "The Single Table AppSync Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref DB
        AwsRegion: !Sub ${AWS::Region}


  # Resolver: Mutation - createStudent
  createStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: createStudent
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
                "id" : $util.dynamodb.toDynamoDBJson("STUDENT"),
                "sort": $util.dynamodb.toDynamoDBJson($context.arguments.input.dni)
          },
          "attributeValues" : {
            "dni" : $util.dynamodb.toDynamoDBJson($context.arguments.input.dni),
            "name" : $util.dynamodb.toDynamoDBJson($context.arguments.input.name),
            "address" : $util.dynamodb.toDynamoDBJson($context.arguments.input.address)
          }
        }
      ResponseMappingTemplate: >
        {
            "name": $util.toJson($ctx.result['name']),
            "dni": $util.toJson($ctx.result['dni']),
            "address": $util.toJson($ctx.result['address'])
        }

  # Resolver: Mutation - updateStudent
  UpdateStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: updateStudent
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
                "id" : $util.dynamodb.toDynamoDBJson("STUDENT"),
                "sort": $util.dynamodb.toDynamoDBJson($context.arguments.input.dni)
          },
          "update":{
              "expression" : "set #name=:name, address = :address",
              "expressionNames" : {
                "#name" : "name"
              }, 
              "expressionValues" : {
                ":name" : $utils.dynamodb.toDynamoDBJson($context.arguments.input.name),
                ":address" : $utils.dynamodb.toDynamoDBJson($context.arguments.input.address)
              }
            }
        }
      ResponseMappingTemplate: >
        {
            "name": $util.toJson($ctx.result['name']),
            "dni": $util.toJson($ctx.result['dni']),
            "address": $util.toJson($ctx.result['address'])
        }

  # Resolver: Mutation - deleteStudent
  DeleteStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties: 
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Mutation
      FieldName: deleteStudent
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson("STUDENT"),
            "sort": $util.dynamodb.toDynamoDBJson($ctx.args.dni)
          }
        }
      ResponseMappingTemplate: >
        {
            "name": $util.toJson($ctx.result['name']),
            "dni": $util.toJson($ctx.result['dni']),
            "address": $util.toJson($ctx.result['address'])
        }

  # Resolver: Query - getStudent
  GetStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: getStudent
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson("STUDENT"),
            "sort": $util.dynamodb.toDynamoDBJson($context.arguments.dni)
          }
        }
      ResponseMappingTemplate: >
        {
            "name": $util.toJson($ctx.result['name']),
            "dni": $util.toJson($ctx.result['dni']),
            "address": $util.toJson($ctx.result['address'])
        }

  # Resolver: Query - listStudents
  ListStudentsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId: !GetAtt AppSyncApi.ApiId
      TypeName: Query
      FieldName: listStudents
      DataSourceName: !GetAtt AppSyncTableDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query": {
            "expression": "id = :id",
            "expressionValues":	{              
        	    ":id" : $util.dynamodb.toDynamoDBJson("STUDENT")
            }
          }
        }
      ResponseMappingTemplate: >
        {
          "students": [
                      #foreach($item in $ctx.result.items)
                        {
                            "dni":$util.toJson($item['dni']),
                            "name": $util.toJson($item['name']),
                            "address": $util.toJson($item['address'])
                        }#if($foreach.hasNext),#end
                        #end
                    ]
        }

  # DynamoDB
  DB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Student
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sort
          AttributeType: S        
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sort
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST




Outputs:
  APIKey:
    Description: API Key
    Value: !GetAtt AppSyncApiKey.ApiKey
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt AppSyncApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt AppSyncApi.ApiId         
