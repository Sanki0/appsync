type Student{
  name: String,
  dni: String!,
  address: String,
  age: Int
  courses: [Course]
}

input StudentInput {
  name: String,
  dni: String!,
  address: String,
  age: Int
  courses: [CourseInput]
}

type StudentsOutput{
  students:[Student]
  nextToken: String
}

type Course{
  name: String
  id: Int
}

input CourseInput{
  name: String
  id: Int
}

type CourseOutput{
  courses: [Course]
}

type Option {
  # titulo
  title: String!
    # url
  url: String!
    # icono
  icon: String
    # activo o no
  active: Boolean!
}

input OptionInput {
    # titulo
  title: String!
    # url
  url: String!
    # icono
  icon: String
    # activo o no
  active: Boolean!
}

type OptionOutput{
  # elementos
  items: [Option]
  # proxima pagina
  nextToken: String
}

type Settings {
  # Aplicaciones
  apps:[Option]
  # Opciones del menu
  menu: [Option]!
  # Procesos
  processes:[Option]!
  # foto
  photo: String
  # nombre completo
  name: String!
  # numero de documento
  dni: String!
  # tipo de documento
  docType: String!
  # email corporativo
  email: String!
  # telefono corporativo
  phone: String
  # departamento o area
  area: String!
  # subdepartamento o subarea
  subArea: String!
  # dias permitidos
  days: Int!
  # dias permitidos de home office
  homeOffice: Int
  # rol
  role: String
  # rol de oficios
  officeRole: String
  # jefe
  boss: String
  # nombre del jefe
  bossName: String
  # backup
  backup: String
  # nombre del backup
  backupName: String
  # usuario
  user: String
  # sexo
  gender: String
  # fecha de nacimiento
  birthDate: String
  # pais de nacimiento
  countryOfBirth: String
  # email personal
  personalEmail: String
  # estado civil
  maritalStatus: String
  # telefono personal
  personalPhone: String
  # pais de residencia
  countryOfResidence: String
  # departamento de residencia
  residenceDepartment: String
  # direcci贸n
  address: String
  # puesto o cargo
  workerType: String
  # fecha de ingreso
  entryDate: String!
  # fecha de ultima sesion
  lastSessionDate: String
  # fecha de creaci贸n de usuario
  creationDate: String!
  # estado de usuario
  userStatus: UserStatus!
  # tipo de usuario
  userType: String!
}

#Pendiente enum de estados
enum UserStatus{
  ACTIVE,
  BLOCKED,
  ARCHIVED,
  UNCONFIRMED,
}

input SettingsInput {
  ### Datos Personales
  # nombre completo
  name: String!
  # tipo de documento
  docType: String!
  # numero de documento
  dni: String!
  # Sexo
  gender: String
  # Fecha de nacimiento
  birthDate: String
  # pais de nacimiento
  countryOfBirth: String
  # email personal
  personalEmail: String
  # estado civil
  maritalStatus: String
  # telefono personal
  personalPhone: String
  # pais de residencia
  countryOfResidence: String
  # departamento de residencia
  residenceDepartment: String
  # direcci贸n
  address: String
  ### Datos Laborales
  # departamento o area
  area: String!
  # subdepartamento o subarea
  subArea: String!
  # puesto o cargo
  workerType: String
  # correo corporativo
  email: String!
  # fecha de ingreso
  entryDate: String!
  # celular corporativo 
  phone: String
  # aplicaciones
  apps:[OptionInput]
  # ppciones del menu
  menu: [OptionInput]!
  # procesos
  processes:[OptionInput]!
  # foto
  photo: String  
  # tipo de usuario
  userType: String!
  ### Otros
  # rol
  role: String
  # rol de oficios
  officeRole: String
  # cantidad dias permitidos
  days: Int! 
  # dias permitidos de home office
  homeOffice: Int!
  # jefes
  boss: String
  # nombre del jefe
  bossName: String
  # user
  user: String
  # backup
  backup: String!
  # nombre del backup
  backupName: String!
}

input UpdateSettingInput {
  # id del usuario
  user: String!
  ### Datos Personales
  # nombre completo
  name: String!
  # Tipo de documento
  docType: String!
  # numero de documeto
  dni: String!
  # sexo
  gender: String
  # fecha de nacimiento
  birthDate: String
  # pais de nacimiento
  countryOfBirth: String
  # email personal
  personalEmail: String
  # estado civil
  maritalStatus: String
  # telefono personal
  personalPhone: String
  # pais de residencia
  countryOfResidence: String
  # departamento de residencia
  residenceDepartment: String
  # direcci贸n
  address: String
  ### Datos Laborales
  # departamento o area
  area: String!
  # subdepartamento o subarea
  subArea: String!
  # puesto o cargo
  workerType: String
  # fecha de ingreso
  entryDate: String! 
  # telefono corporativo 
  phone: String
  # aplicaciones
  apps:[OptionInput]
  # opciones del menu
  menu: [OptionInput]!
  # procesos
  processes:[OptionInput]
  ### Otros
  # rol
  role: String
  # rol de oficios
  officeRole: String
  # jefe
  boss: String
  # nombre del jefe
  bossName: String
  # backup
  backup: String
  # nombre del backup
  backupName: String
  # dias permitidos
  days: Int!
  # dias permitidos de home office
  homeOffice: Int!
}

# schema {
#   query: Query
#   mutation: Mutation
# }

type Query{
  listStudents: StudentsOutput,
 
  getStudent(dni: String!): Student,

  filterStudent(limit: Int, nextToken: String): StudentsOutput
}

type Mutation{
  createStudent(input: StudentInput): Student,
  
  updateStudent(input: StudentInput): Student,
  
  deleteStudent(dni: String!): Student,

  sumAgeStudent(dni: String!): Student,

  sumAgeUpdateStudent(dni: String!, age: Int): Student,

  storeSettings(settings:SettingsInput!): Settings
  # editar configuraciones OnBoarding
  updateSettings(settings:UpdateSettingInput!): Settings

  getStudentCourses(dni: String): CourseOutput

}

