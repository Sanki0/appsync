AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'pruebas-sanki0

  '
Parameters:
  SENDER:
    Description: Ambiente despliegue
    Type: String
    Default: sebastian.ferreyra@devmente.com
  Stage:
    Description: Ambiente despliegue
    Type: String
    Default: dev
    AllowedValues:
    - stg
    - prd
    - dev
    - qa
Resources:
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - appsync.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: AllowAccessForAppsyncResolvers
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - states:StartSyncExecution
            Resource:
            - Ref: StoreSettingsStateMachine
            - Ref: SumAgeStateMachine
            - Ref: SumAgeUpdateStateMachine
            - Ref: MapResolverStateMachine
            - Ref: SendInvitationStateMachine
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
            Resource:
            - Fn::GetAtt:
              - DB
              - Arn
            - Fn::Sub:
              - ${Table}/index/*
              - Table:
                  Fn::GetAtt:
                  - DB
                  - Arn
          - Effect: Allow
            Action:
            - lambda:invokeFunction
            Resource:
            - Fn::GetAtt:
              - GetAllUsersFunction
              - Arn
  AppSyncApi:
    DependsOn: AppSyncServiceRole
    Type: AWS::AppSync::GraphQLApi
    Description: The GraphQL API for the single table App
    Properties:
      Name: AppSyncTestAPI
      AuthenticationType: API_KEY
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      DefinitionS3Location: ../../schema.graphql
  AppSyncTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: SingleTableStudents
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      Description: The Single Table AppSync Data Source
      Type: AMAZON_DYNAMODB
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
      DynamoDBConfig:
        TableName:
          Ref: DB
        AwsRegion:
          Fn::Sub: ${AWS::Region}
  StepFunctionsHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      Name: StepFunctionsHttpDataSource
      Description: Step Functions HTTP
      Type: HTTP
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
      HttpConfig:
        Endpoint:
          Fn::Sub: https://sync-states.${AWS::Region}.amazonaws.com/
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion:
              Ref: AWS::Region
            SigningServiceName: states
  GetAllUsersDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      Name: GetAllUsersDataSource
      Type: AWS_LAMBDA
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
      LambdaConfig:
        LambdaFunctionArn:
          Fn::GetAtt:
          - GetAllUsersFunction
          - Arn
  GetAllUsersResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Query
      FieldName: getAllUsers
      DataSourceName:
        Fn::GetAtt:
        - GetAllUsersDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"Invoke\",\n  \"payload\": {\n    \"process\": $utils.toJson($context.args.process)\n\
        \  }\n}\n"
      ResponseMappingTemplate: $util.toJson($context.result)
  createStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: createStudent
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"PutItem\",\n  \"key\": {\n        \"id\" : $util.dynamodb.toDynamoDBJson(\"\
        STUDENT\"),\n        \"sort\": $util.dynamodb.toDynamoDBJson($context.arguments.input.dni)\n\
        \  },\n  \"attributeValues\" : {\n    \"dni\" : $util.dynamodb.toDynamoDBJson($context.arguments.input.dni),\n\
        \    \"name\" : $util.dynamodb.toDynamoDBJson($context.arguments.input.name),\n\
        \    \"address\" : $util.dynamodb.toDynamoDBJson($context.arguments.input.address),\n\
        \    \"age\" : $util.dynamodb.toDynamoDBJson($context.arguments.input.age),\n\
        \    \"courses\" : $util.dynamodb.toDynamoDBJson($context.arguments.input.courses)\n\
        \  }\n}\n"
      ResponseMappingTemplate: "{\n    \"name\": $util.toJson($ctx.result['name']),\n\
        \    \"dni\": $util.toJson($ctx.result['dni']),\n    \"address\": $util.toJson($ctx.result['address']),\n\
        \    \"age\": $util.toJson($ctx.result['age']),\n    \"courses\": \n     \
        \ [\n        #foreach($course in $ctx.result.courses)\n        {\n       \
        \   \"id\": $util.toJson($course['id']),\n          \"name\": $util.toJson($course.name)\n\
        \        }#if($foreach.hasNext),#end\n        #end\n      ]\n}\n"
  UpdateStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: updateStudent
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"UpdateItem\",\n  \"key\": {\n        \"id\" : $util.dynamodb.toDynamoDBJson(\"\
        STUDENT\"),\n        \"sort\": $util.dynamodb.toDynamoDBJson($context.arguments.input.dni)\n\
        \  },\n  \"update\":{\n      \"expression\" : \"set #name=:name, address =\
        \ :address, age = :age\",\n      \"expressionNames\" : {\n        \"#name\"\
        \ : \"name\"\n      }, \n      \"expressionValues\" : {\n\n        \":name\"\
        \ : $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.input.name,\
        \ \"\")),\n\n        \":address\" : $utils.dynamodb.toDynamoDBJson($context.arguments.input.address),\n\
        \        \":age\" : $utils.dynamodb.toDynamoDBJson($context.arguments.input.age)\n\
        \      }\n    }\n}\n"
      ResponseMappingTemplate: "{\n    \"name\": $util.toJson($ctx.result['name']),\n\
        \    \"dni\": $util.toJson($ctx.result['dni']),\n    \"address\": $util.toJson($ctx.result['address']),\n\
        \    \"age\": $util.toJson($ctx.result['age'])\n}\n"
  DeleteStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: deleteStudent
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"DeleteItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson(\"\
        STUDENT\"),\n    \"sort\": $util.dynamodb.toDynamoDBJson($ctx.args.dni)\n\
        \  }\n}\n"
      ResponseMappingTemplate: "{\n    \"name\": $util.toJson($ctx.result['name']),\n\
        \    \"dni\": $util.toJson($ctx.result['dni']),\n    \"address\": $util.toJson($ctx.result['address']),\n\
        \    \"age\": $util.toJson($ctx.result['age'])\n}\n"
  GetStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Query
      FieldName: getStudent
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"GetItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson(\"\
        STUDENT\"),\n    \"sort\": $util.dynamodb.toDynamoDBJson($context.arguments.dni)\n\
        \  }\n}\n"
      ResponseMappingTemplate: "{\n    \"name\": $util.toJson($ctx.result['name']),\n\
        \    \"dni\": $util.toJson($ctx.result['dni']),\n    \"address\": $util.toJson($ctx.result['address']),\n\
        \    \"age\": $util.toJson($ctx.result['age'])\n}\n"
  ListStudentsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Query
      FieldName: listStudents
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"Query\",\n  \"query\": {\n    \"expression\": \"id = :id\",\n    \"expressionValues\"\
        :\t{              \n\t    \":id\" : $util.dynamodb.toDynamoDBJson(\"STUDENT\"\
        )\n    }\n  }\n}\n"
      ResponseMappingTemplate: "{\n  \"students\": [\n              #foreach($item\
        \ in $ctx.result.items)\n                {\n                    \"dni\":$util.toJson($item['dni']),\n\
        \                    \"name\": $util.toJson($item['name']),\n            \
        \        \"address\": $util.toJson($item['address']),\n                  \
        \  \"age\": $util.toJson($item['age'])\n                }#if($foreach.hasNext),#end\n\
        \                #end\n            ]\n}\n"
  FilterStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Query
      FieldName: filterStudent
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"Query\",\n  \"query\": {\n    \"expression\": \"id = :id\",\n    \"expressionValues\"\
        :\t{              \n\t    \":id\" : $util.dynamodb.toDynamoDBJson(\"STUDENT\"\
        )\n    }\n  },\n  \"filter\" : {\n    \"expression\" : \"#name = :name\",\n\
        \    \"expressionNames\" : {\n        \"#name\" : \"name\"\n      }, \n  \
        \  \"expressionValues\" : {\n        \":name\" : $util.dynamodb.toDynamoDBJson(\"\
        sanki0\")\n    }\n  },\n  #if( $context.args.nextToken ) \"nextToken\": \"\
        $context.args.nextToken\", #end\n  #if( $context.args.limit ) \"limit\" :\
        \ $context.args.limit #else \"limit\": 5  #end\n}\n"
      ResponseMappingTemplate: "{\n  \"students\": [\n              #foreach($item\
        \ in $ctx.result.items)\n                {\n                    \"dni\":$util.toJson($item['dni']),\n\
        \                    \"name\": $util.toJson($item['name']),\n            \
        \        \"address\": $util.toJson($item['address']),\n                  \
        \  \"age\": $util.toJson($item['age'])\n                }#if($foreach.hasNext),#end\n\
        \                #end\n            ],\n  \"nextToken\": $util.toJson($ctx.result.nextToken)\n\
        }\n"
  SumAgeStudentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: sumAgeStudent
      DataSourceName:
        Fn::GetAtt:
        - StepFunctionsHttpDataSource
        - Name
      RequestMappingTemplate:
        Fn::Sub: "{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"\
          resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\"\
          : \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"AWSStepFunctions.StartSyncExecution\"\
          \n    },\n    \"body\": {\n      \"stateMachineArn\": \"${SumAgeStateMachine}\"\
          ,\n      \"input\": \"{ \\\"dni\\\": $util.escapeJavaScript($util.toJson($ctx.args.dni))}\"\
          \n    }\n  }\n}\n"
      ResponseMappingTemplate: $util.parseJson($ctx.result.body).output
  SumAgeUpdateStudentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: sumAgeUpdateStudent
      DataSourceName:
        Fn::GetAtt:
        - StepFunctionsHttpDataSource
        - Name
      RequestMappingTemplate:
        Fn::Sub: "{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"\
          resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\"\
          : \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"AWSStepFunctions.StartSyncExecution\"\
          \n    },\n    \"body\": {\n      \"stateMachineArn\": \"${SumAgeUpdateStateMachine}\"\
          ,\n      \"input\": \"{ \\\"dni\\\": $util.escapeJavaScript($util.toJson($ctx.args.dni)),\
          \  \\\"age\\\": $util.escapeJavaScript($util.toJson($ctx.args.age))}\"\n\
          \    }\n  }\n}\n"
      ResponseMappingTemplate: $util.parseJson($ctx.result.body).output
  GetStudentCoursesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: getStudentCourses
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2018-05-29\",\n  \"method\": \"\
        POST\",\n  \"resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n\
        \      \"content-type\": \"application/x-amz-json-1.0\",\n      \"x-amz-target\"\
        :\"AWSStepFunctions.StartSyncExecution\"\n    },\n    \"body\": {\n      \"\
        stateMachineArn\": \"${MapResolverStateMachine}\",\n      \"input\": \"{ \\\
        \"dni\\\": $util.escapeJavaScript($util.toJson($ctx.args.dni))}\"\n    }\n\
        \  }\n}\n"
      ResponseMappingTemplate: $ctx.result.body
  StoreSettingsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: storeSettings
      DataSourceName:
        Fn::GetAtt:
        - StepFunctionsHttpDataSource
        - Name
      RequestMappingTemplate:
        Fn::Sub: "{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"\
          resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\"\
          : \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"AWSStepFunctions.StartSyncExecution\"\
          \n    },\n    \"body\": {\n      \"stateMachineArn\": \"${StoreSettingsStateMachine}\"\
          ,\n      \"input\": \"{ \\\"settings\\\": $util.escapeJavaScript($util.toJson($ctx.args.settings))}\"\
          \n    }\n  }\n}\n"
      ResponseMappingTemplate: $ctx.result.body
  UpdateSettingResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: updateSettings
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "#if($util.isNull($ctx.args.settings.homeOffice))\n\
        \  #set($homeOffice=0)\n#else\n  #set($homeOffice=$ctx.args.settings.homeOffice)\n\
        #end {\n    \"version\" : \"2018-05-29\",\n    \"operation\" : \"UpdateItem\"\
        ,\n    \"key\" : {\n        \"id\" : $util.dynamodb.toDynamoDBJson($ctx.args.settings.user),\n\
        \        \"sort\" : $util.dynamodb.toDynamoDBJson(\"SETTINGS\")\n    },\n\
        \    \"update\" : {\n    \"expression\" : \"set #name=:name, docType=:docType,\
        \ dni=:dni, gender=:gender, birthDate=:birthDate, countryOfBirth=:countryOfBirth,\
        \ personalEmail=:personalEmail, maritalStatus=:maritalStatus, personalPhone=:personalPhone,\
        \ countryOfResidence=:countryOfResidence, residenceDepartment=:residenceDepartment,\
        \ address=:address, area=:area, subArea=:subArea, workerType=:workerType,\
        \ entryDate=:entryDate, phone=:phone, #if(!$util.isNullOrEmpty($ctx.args.settings.apps))\
        \ apps=:apps,#end menu=:menu, processes=:processes, #if(!$util.isNullOrEmpty($ctx.args.settings.role))\
        \ #role=:role,#end #if(!$util.isNullOrEmpty($ctx.args.settings.officeRole))\
        \ officeRole=:officeRole,#end #if(!$util.isNullOrEmpty($ctx.args.settings.boss))\
        \ boss=:boss,#end #if(!$util.isNullOrEmpty($ctx.args.settings.bossName)) bossName=:bossName,#end\
        \ #backup=:backup, backupName=:backupName, days=:days, homeOffice=:homeOffice\"\
        ,\n    \"expressionNames\" : {\n        \"#name\": \"name\",\n        #if(!$util.isNullOrEmpty($ctx.args.settings.role))\n\
        \        \"#role\": \"role\",\n        #end\n        \"#backup\": \"backup\"\
        \n      },\n      \"expressionValues\" : {\n        \":name\": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.name),\n\
        \        \":docType\": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.docType),\n\
        \        \":dni\": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.dni),\n\
        \        \":gender\": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.gender,\
        \ \"\")),\n        \":birthDate\": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.birthDate,\
        \ \"\")),\n        \":countryOfBirth\": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.countryOfBirth,\
        \ \"\")),\n        \":personalEmail\": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.personalEmail,\
        \ \"\")),\n        \":maritalStatus\": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.maritalStatus,\
        \ \"\")),\n        \":personalPhone\": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.personalPhone,\
        \ \"\")),\n        \":countryOfResidence\": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.countryOfResidence,\
        \ \"\")),\n        \":residenceDepartment\": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.residenceDepartment,\
        \ \"\")),\n        \":address\": $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.address,\
        \ \"\")),\n        \":area\" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.area),\n\
        \        \":subArea\" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.subArea),\n\
        \        \":workerType\" : $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.workerType,\
        \ \"\")),\n        \":entryDate\" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.entryDate),\n\
        \        \":phone\" : $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.phone,\
        \ \"\")),\n\n        \":apps\": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.apps),\n\
        \n        \":menu\" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.menu),\n\
        \        \":processes\" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.processes),\n\
        \        #if(!$util.isNullOrEmpty($ctx.args.settings.role))\n        \":role\"\
        : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.role),\n        #end\n\
        \        #if(!$util.isNullOrEmpty($ctx.args.settings.officeRole))\n      \
        \  \":officeRole\": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.officeRole),\n\
        \        #end\n        #if(!$util.isNullOrEmpty($ctx.args.settings.boss))\n\
        \        \":boss\": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.boss),\n\
        \        #end\n        #if(!$util.isNullOrEmpty($ctx.args.settings.bossName))\n\
        \        \":bossName\": $utils.dynamodb.toDynamoDBJson($ctx.args.settings.bossName),\n\
        \        #end\n        \":backup\" : $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.backup,\
        \ \"\")),\n        \":backupName\" : $utils.dynamodb.toDynamoDBJson($util.defaultIfNullOrEmpty($ctx.args.settings.backupName,\
        \ \"\")),\n        \":days\" : $utils.dynamodb.toDynamoDBJson($ctx.args.settings.days),\n\
        \        \":homeOffice\": $utils.dynamodb.toDynamoDBJson($homeOffice)\n  \
        \    }\n    }\n}\n"
      ResponseMappingTemplate: "{\n\n  \"apps\": $util.toJson($ctx.result.apps), \n\
        \  \"menu\": $util.toJson($ctx.result.menu), \n  \"processes\": $util.toJson($ctx.result.processes),\
        \ \n  \"photo\": $util.toJson($ctx.result.photo), \n  \"name\": $util.toJson($ctx.result.name),\
        \ \n  \"dni\": $util.toJson($ctx.result.dni), \n  \"docType\": $util.toJson($ctx.result.docType),\
        \ \n  \"email\": $util.toJson($ctx.result.email),\n  \"phone\": $util.toJson($ctx.result.phone),\n\
        \  \"area\": $util.toJson($ctx.result.area), \n  \"subArea\": $util.toJson($ctx.result.subArea),\
        \ \n  \"days\": $util.toJson($ctx.result.days), \n  \"homeOffice\": $util.toJson($ctx.result.homeOffice),\n\
        \  \"role\": $util.toJson($ctx.result.role), \n  \"officeRole\": $util.toJson($ctx.result.officeRole),\
        \ \n  \"boss\": $util.toJson($ctx.result.boss), \n  \"bossName\": $util.toJson($ctx.result.bossName),\n\
        \  \"backup\": $util.toJson($ctx.result.backup), \n  \"backupName\": $util.toJson($ctx.result.backupName),\
        \ \n  \"user\": $util.toJson($ctx.result.user), \n  \"gender\": $util.toJson($ctx.result.gender),\
        \ \n  \"birthDate\": $util.toJson($ctx.result.birthDate), \n  \"countryOfBirth\"\
        : $util.toJson($ctx.result.countryOfBirth), \n  \"personalEmail\": $util.toJson($ctx.result.personalEmail),\
        \ \n  \"maritalStatus\": $util.toJson($ctx.result.maritalStatus), \n  \"personalPhone\"\
        : $util.toJson($ctx.result.personalPhone), \n  \"countryOfResidence\": $util.toJson($ctx.result.countryOfResidence),\
        \ \n  \"residenceDepartment\": $util.toJson($ctx.result.residenceDepartment),\
        \ \n  \"address\": $util.toJson($ctx.result.address), \n  \"workerType\":\
        \ $util.toJson($ctx.result.workerType), \n  \"entryDate\": $util.toJson($ctx.result.entryDate),\n\
        \  \"lastSessionDate\": $util.toJson($ctx.result.lastSessionDate),\n  \"creationDate\"\
        : $util.toJson($ctx.result.creationDate),\n  \"userStatus\": $util.toJson($ctx.result.userStatus),\n\
        \  \"userType\": $util.toJson($ctx.result.userType)\n}\n"
  StoreSettingsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/vendedlogs/states/${AWS::StackName}/store-settings
      RetentionInDays: 3
  SendInvitationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/vendedlogs/states/${AWS::StackName}/send-invitation
      RetentionInDays: 3
  SumAgeLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/vendedlogs/states/${AWS::StackName}/sum-age
      RetentionInDays: 3
  SumAgeUpdateLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/vendedlogs/states/${AWS::StackName}/sum-age-update
      RetentionInDays: 3
  MapResolverLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/vendedlogs/states/${AWS::StackName}/map-resolver
      RetentionInDays: 3
  StoreSettingsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../../statemachines/store_settings.asl.json
      Type: EXPRESS
      Name: ofvi-store_settings
      DefinitionSubstitutions:
        DDBQuery: arn:aws:states:::aws-sdk:dynamodb:query
        CheckMailUserTypeFunctionArn:
          Fn::GetAtt:
          - CheckMailUserTypeFunction
          - Arn
        StoreSettingsFunctionArn:
          Fn::GetAtt:
          - StoreSettingsFunction
          - Arn
        SendInvitationStateMachineArn:
          Fn::GetAtt:
          - SendInvitationStateMachine
          - Arn
        TableName:
          Ref: DB
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - StoreSettingsLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DB
      - LambdaInvokePolicy:
          FunctionName:
            Ref: StoreSettingsFunction
      - StepFunctionsExecutionPolicy:
          StateMachineName:
            Fn::GetAtt:
            - SendInvitationStateMachine
            - Name
      - LambdaInvokePolicy:
          FunctionName:
            Ref: CheckMailUserTypeFunction
      - CloudWatchLogsFullAccess
  SendInvitationStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: ../../statemachines/send-invitation.asl.json
      Type: EXPRESS
      Name: ofvi-send-invitation
      DefinitionSubstitutions:
        GetInvitationMailTemplateFunctionArn:
          Fn::GetAtt:
          - GetInvitationMailTemplateFunction
          - Arn
        SendInvitationMailFunctionArn:
          Fn::GetAtt:
          - SendInvitationMailFunction
          - Arn
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - SendInvitationLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: GetInvitationMailTemplateFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: SendInvitationMailFunction
      - CloudWatchLogsFullAccess
  SumAgeStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: sumAgeStateMachine
      DefinitionUri: ../../statemachines/sum-age.asl.json
      DefinitionSubstitutions:
        DDBUpdateItem:
          Fn::Sub: arn:${AWS::Partition}:states:::dynamodb:updateItem
        DDBGetItem:
          Fn::Sub: arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName:
          Ref: DB
        SumAgeFunctionArn:
          Fn::GetAtt:
          - SumAgeFunction
          - Arn
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - SumAgeLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: SumAgeFunction
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DB
      - CloudWatchLogsFullAccess
  SumAgeUpdateStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: sumAgeUpdateStateMachine
      DefinitionUri: ../../statemachines/sum-age-update.asl.json
      DefinitionSubstitutions:
        DDBGetItem:
          Fn::Sub: arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName:
          Ref: DB
        SumAgeUpdateFunctionArn:
          Fn::GetAtt:
          - SumAgeUpdateFunction
          - Arn
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - SumAgeUpdateLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: SumAgeUpdateFunction
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DB
      - CloudWatchLogsFullAccess
  MapResolverStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: mapResolverStateMachine
      DefinitionUri: ../../statemachines/map-resolver.asl.json
      DefinitionSubstitutions:
        DDBUpdateItem:
          Fn::Sub: arn:${AWS::Partition}:states:::dynamodb:updateItem
        DDBGetItem:
          Fn::Sub: arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName:
          Ref: DB
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - MapResolverLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DB
      - CloudWatchLogsFullAccess
  DB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Student
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: sort
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      - AttributeName: sort
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
      - IndexName: list-users
        KeySchema:
        - AttributeName: sort
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
  StoreSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: StoreSettingsFunction
      Handler: ofvi-store-settings
      Runtime: go1.x
      MemorySize: 128
      Timeout: 5
      Environment:
        Variables:
          TableName:
            Ref: DB
          REGION:
            Fn::Sub: ${AWS::Region}
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DB
      - AWSLambdaBasicExecutionRole
    Metadata:
      SamResourceId: StoreSettingsFunction
  CheckMailUserTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CheckMailUserTypeFunction
      Handler: ofvi-check-mail-usertype
      Runtime: go1.x
      MemorySize: 128
      Timeout: 5
      Policies:
      - AWSLambdaBasicExecutionRole
    Metadata:
      SamResourceId: CheckMailUserTypeFunction
  SendInvitationMailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SendInvitationMailFunction
      Handler: ofvi-send-invitation-mail
      Runtime: go1.x
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          SENDER:
            Ref: SENDER
          Stage:
            Ref: Stage
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
        - Sid: SESPolicy
          Effect: Allow
          Action:
          - ses:SendEmail
          Resource: '*'
    Metadata:
      SamResourceId: SendInvitationMailFunction
  SumAgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SumAgeFunction
      Handler: handler
      Runtime: go1.x
      MemorySize: 128
      Timeout: 5
      Policies:
      - AWSLambdaBasicExecutionRole
    Metadata:
      SamResourceId: SumAgeFunction
  SumAgeUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SumAgeUpdateFunction
      Handler: sum-age-update
      Runtime: go1.x
      MemorySize: 128
      Timeout: 5
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DB
      Environment:
        Variables:
          DB:
            Ref: DB
    Metadata:
      SamResourceId: SumAgeUpdateFunction
  CheckEmailUserTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CheckEmailUserTypeFunction
      Handler: ofvi-check-email-usertype
      Runtime: go1.x
      Policies:
      - AWSLambdaBasicExecutionRole
    Metadata:
      SamResourceId: CheckEmailUserTypeFunction
  CopyCoursesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CopyCoursesFunction
      Handler: copy-courses
      Runtime: go1.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DB
      Environment:
        Variables:
          DB:
            Ref: DB
    Metadata:
      SamResourceId: CopyCoursesFunction
  GetAllUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetAllUsersFunction
      Handler: get-all-users
      Runtime: go1.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DB
      Environment:
        Variables:
          DB:
            Ref: DB
    Metadata:
      SamResourceId: GetAllUsersFunction
  GetInvitationMailTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetInvitationMailTemplateFunction
      Handler: ofvi-get-invitation-mail-template
      Runtime: go1.x
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          BucketName:
            Ref: TemplateBucket
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: TemplateBucket
    Metadata:
      SamResourceId: GetInvitationMailTemplateFunction
  SendEmailCognitoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SendEmailCognitoFunction
      Handler: send-email-cognito
      Runtime: go1.x
      Environment:
        Variables:
          REGION:
            Fn::Sub: ${AWS::Region}
          BucketName:
            Ref: TemplateBucket
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3ReadPolicy:
          BucketName:
            Ref: TemplateBucket
    Metadata:
      SamResourceId: SendEmailCognitoFunction
  TemplateBucket:
    Type: AWS::S3::Bucket
Outputs:
  APIKey:
    Description: API Key
    Value:
      Fn::GetAtt:
      - AppSyncApiKey
      - ApiKey
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value:
      Fn::GetAtt:
      - AppSyncApi
      - GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value:
      Fn::GetAtt:
      - AppSyncApi
      - ApiId
