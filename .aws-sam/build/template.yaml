AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'pruebas-sanki0

  '
Resources:
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - appsync.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: AllowAccessForAppsyncResolvers
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - states:StartSyncExecution
            Resource:
            - Ref: SumAgeStateMachine
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
            Resource:
            - Fn::GetAtt:
              - DB
              - Arn
            - Fn::Sub:
              - ${Table}/index/*
              - Table:
                  Fn::GetAtt:
                  - DB
                  - Arn
  AppSyncApi:
    DependsOn: AppSyncServiceRole
    Type: AWS::AppSync::GraphQLApi
    Description: The GraphQL API for the single table App
    Properties:
      Name: AppSyncTestAPI
      AuthenticationType: API_KEY
  AppSyncApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      DefinitionS3Location: ../../schema.graphql
  AppSyncTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      Name: SingleTableStudents
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      Description: The Single Table AppSync Data Source
      Type: AMAZON_DYNAMODB
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
      DynamoDBConfig:
        TableName:
          Ref: DB
        AwsRegion:
          Fn::Sub: ${AWS::Region}
  StepFunctionsHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      Name: StepFunctionsHttpDataSource
      Description: Step Functions HTTP
      Type: HTTP
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncServiceRole
        - Arn
      HttpConfig:
        Endpoint:
          Fn::Sub: https://sync-states.${AWS::Region}.amazonaws.com/
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion:
              Ref: AWS::Region
            SigningServiceName: states
  createStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: createStudent
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"PutItem\",\n  \"key\": {\n        \"id\" : $util.dynamodb.toDynamoDBJson(\"\
        STUDENT\"),\n        \"sort\": $util.dynamodb.toDynamoDBJson($context.arguments.input.dni)\n\
        \  },\n  \"attributeValues\" : {\n    \"dni\" : $util.dynamodb.toDynamoDBJson($context.arguments.input.dni),\n\
        \    \"name\" : $util.dynamodb.toDynamoDBJson($context.arguments.input.name),\n\
        \    \"address\" : $util.dynamodb.toDynamoDBJson($context.arguments.input.address),\n\
        \    \"age\" : $util.dynamodb.toDynamoDBJson($context.arguments.input.age)\n\
        \  }\n}\n"
      ResponseMappingTemplate: "{\n    \"name\": $util.toJson($ctx.result['name']),\n\
        \    \"dni\": $util.toJson($ctx.result['dni']),\n    \"address\": $util.toJson($ctx.result['address']),\n\
        \    \"age\": $util.toJson($ctx.result['age'])\n}\n"
  UpdateStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: updateStudent
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"UpdateItem\",\n  \"key\": {\n        \"id\" : $util.dynamodb.toDynamoDBJson(\"\
        STUDENT\"),\n        \"sort\": $util.dynamodb.toDynamoDBJson($context.arguments.input.dni)\n\
        \  },\n  \"update\":{\n      \"expression\" : \"set #name=:name, address =\
        \ :address, age = :age\",\n      \"expressionNames\" : {\n        \"#name\"\
        \ : \"name\"\n      }, \n      \"expressionValues\" : {\n        \":name\"\
        \ : $utils.dynamodb.toDynamoDBJson($context.arguments.input.name),\n     \
        \   \":address\" : $utils.dynamodb.toDynamoDBJson($context.arguments.input.address),\n\
        \        \":age\" : $utils.dynamodb.toDynamoDBJson($context.arguments.input.age)\n\
        \      }\n    }\n}\n"
      ResponseMappingTemplate: "{\n    \"name\": $util.toJson($ctx.result['name']),\n\
        \    \"dni\": $util.toJson($ctx.result['dni']),\n    \"address\": $util.toJson($ctx.result['address']),\n\
        \    \"age\": $util.toJson($ctx.result['age'])\n}\n"
  DeleteStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: deleteStudent
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"DeleteItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson(\"\
        STUDENT\"),\n    \"sort\": $util.dynamodb.toDynamoDBJson($ctx.args.dni)\n\
        \  }\n}\n"
      ResponseMappingTemplate: "{\n    \"name\": $util.toJson($ctx.result['name']),\n\
        \    \"dni\": $util.toJson($ctx.result['dni']),\n    \"address\": $util.toJson($ctx.result['address']),\n\
        \    \"age\": $util.toJson($ctx.result['age'])\n}\n"
  GetStudentResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Query
      FieldName: getStudent
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"GetItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson(\"\
        STUDENT\"),\n    \"sort\": $util.dynamodb.toDynamoDBJson($context.arguments.dni)\n\
        \  }\n}\n"
      ResponseMappingTemplate: "{\n    \"name\": $util.toJson($ctx.result['name']),\n\
        \    \"dni\": $util.toJson($ctx.result['dni']),\n    \"address\": $util.toJson($ctx.result['address']),\n\
        \    \"age\": $util.toJson($ctx.result['age'])\n}\n"
  ListStudentsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSyncSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Query
      FieldName: listStudents
      DataSourceName:
        Fn::GetAtt:
        - AppSyncTableDataSource
        - Name
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"Query\",\n  \"query\": {\n    \"expression\": \"id = :id\",\n    \"expressionValues\"\
        :\t{              \n\t    \":id\" : $util.dynamodb.toDynamoDBJson(\"STUDENT\"\
        )\n    }\n  }\n}\n"
      ResponseMappingTemplate: "{\n  \"students\": [\n              #foreach($item\
        \ in $ctx.result.items)\n                {\n                    \"dni\":$util.toJson($item['dni']),\n\
        \                    \"name\": $util.toJson($item['name']),\n            \
        \        \"address\": $util.toJson($item['address']),\n                  \
        \  \"age\": $util.toJson($item['age'])\n                }#if($foreach.hasNext),#end\n\
        \                #end\n            ]\n}\n"
  SumAgeStudentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt:
        - AppSyncApi
        - ApiId
      TypeName: Mutation
      FieldName: sumAgeStudent
      DataSourceName:
        Fn::GetAtt:
        - StepFunctionsHttpDataSource
        - Name
      RequestMappingTemplate:
        Fn::Sub: "{\n  \"version\": \"2018-05-29\",\n  \"method\": \"POST\",\n  \"\
          resourcePath\": \"/\",\n  \"params\": {\n    \"headers\": {\n      \"content-type\"\
          : \"application/x-amz-json-1.0\",\n      \"x-amz-target\":\"AWSStepFunctions.StartSyncExecution\"\
          \n    },\n    \"body\": {\n      \"stateMachineArn\": \"${SumAgeStateMachine}\"\
          ,\n      \"input\": \"{ \\\"dni\\\": $util.escapeJavaScript($util.toJson($ctx.args.dni))}\"\
          \n    }\n  }\n}\n"
      ResponseMappingTemplate: $util.parseJson($ctx.result.body).output
  SumAgeLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/vendedlogs/states/${AWS::StackName}/sum-age
      RetentionInDays: 3
  SumAgeStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Name: sumAgeStateMachine
      DefinitionUri: ../../statemachines/sum-age.asl.json
      DefinitionSubstitutions:
        DDBUpdateItem:
          Fn::Sub: arn:${AWS::Partition}:states:::dynamodb:updateItem
        DDBGetItem:
          Fn::Sub: arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName:
          Ref: DB
        SumAgeFunctionArn:
          Fn::GetAtt:
          - SumAgeFunction
          - Arn
      Logging:
        Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn:
              Fn::GetAtt:
              - SumAgeLogs
              - Arn
        IncludeExecutionData: true
        Level: ALL
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: SumAgeFunction
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DB
      - CloudWatchLogsFullAccess
  DB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Student
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: sort
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      - AttributeName: sort
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  SumAgeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SumAgeFunction
      Handler: handler
      Runtime: go1.x
      MemorySize: 128
      Timeout: 5
      Policies:
      - AWSLambdaBasicExecutionRole
    Metadata:
      SamResourceId: SumAgeFunction
Outputs:
  APIKey:
    Description: API Key
    Value:
      Fn::GetAtt:
      - AppSyncApiKey
      - ApiKey
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value:
      Fn::GetAtt:
      - AppSyncApi
      - GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value:
      Fn::GetAtt:
      - AppSyncApi
      - ApiId
